/******************************************************************************
 *	Copyright (C) 2020	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include **************************************************************
 ******************************************************************************/
#include "libalx/extra/cv/imgproc/shape/contour/sort.hpp"

#include <algorithm>
#include <vector>

#include <opencv2/core/types.hpp>
#include <opencv2/imgproc.hpp>


/******************************************************************************
 ******* define ***************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* enum / struct / union ************************************************
 ******************************************************************************/


/******************************************************************************
 ******* static prototypes ****************************************************
 ******************************************************************************/
static
bool	cmp	(const class std::vector<class cv::Point_<int>> &a,
		 const class std::vector<class cv::Point_<int>> &b);


/******************************************************************************
 ******* global functions *****************************************************
 ******************************************************************************/
void	alx::CV::sort_conts_lr	(class std::vector<
					class std::vector<
					class cv::Point_<int>>> *conts)
{
	std::sort(conts->begin(), conts->end(), &cmp);
}

void	alx_cv_sort_conts_lr	(void *conts)
{
	alx::CV::sort_conts_lr((class std::vector<
					class std::vector<
					class cv::Point_<int>>> *)conts);
}


/******************************************************************************
 ******* alias ****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* static function definitions ******************************************
 ******************************************************************************/
static
bool	cmp	(const class std::vector<class cv::Point_<int>> &a,
		 const class std::vector<class cv::Point_<int>> &b)
{
	class cv::Rect_<int>	ra;
	class cv::Rect_<int>	rb;

	ra	= cv::boundingRect(a);
	rb	= cv::boundingRect(b);

	return	ra.x < rb.x;
}


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
