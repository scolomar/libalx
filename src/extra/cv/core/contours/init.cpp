/******************************************************************************
 *	Copyright (C) 2018	Alejandro Colomar Andr√©s		      *
 *	SPDX-License-Identifier:	LGPL-2.0-only			      *
 ******************************************************************************/


/******************************************************************************
 ******* include **************************************************************
 ******************************************************************************/
#include "libalx/extra/cv/core/contours/init.hpp"

#include <memory>
#include <vector>

#include <opencv2/core/types.hpp>

#include "libalx/base/compiler/restrict.hpp"
#include "libalx/base/stdlib/alloc/mallocarrays.hpp"


/******************************************************************************
 ******* define ***************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* enum / struct / union ************************************************
 ******************************************************************************/


/******************************************************************************
 ******* static prototypes ****************************************************
 ******************************************************************************/


/******************************************************************************
 ******* global functions *****************************************************
 ******************************************************************************/
int	alx::CV::init_conts	(class std::vector<
					class std::vector<
					class cv::Point_<int>>> **conts)
{

	if (alx_mallocarrays(conts, 1))
		return	-1;
	new (*conts)	std::vector<std::vector<cv::Point_<int>>>();
	return	0;
}

int	alx_cv_init_conts	(void **conts)
{
	return	alx::CV::init_conts((class std::vector<
					class std::vector<
					class cv::Point_<int>>> **)conts);
}

void	alx::CV::deinit_conts	(class std::vector<
					class std::vector<
					class cv::Point_<int>>> *conts)
{

	if (!conts)
		return;
	std::destroy_at(conts);
	free(conts);
}

void	alx_cv_deinit_conts	(void *conts)
{
	alx::CV::deinit_conts((class std::vector<
					class std::vector<
					class cv::Point_<int>>> *)conts);
}


/******************************************************************************
 ******* alias ****************************************************************
 ******************************************************************************/


/******************************************************************************
 ******* static function definitions ******************************************
 ******************************************************************************/


/******************************************************************************
 ******* end of file **********************************************************
 ******************************************************************************/
